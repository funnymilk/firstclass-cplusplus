#include <iostream>

/*
Написать программу, вычисляющую выражение a * (b + (c / d)) и выводящую результат с плавающей точкой, 
где a, b, c, d – целочисленные константы;

Дано целое число, выведите на экран разницу между этим числом и числом 21. Если же заданное число больше, чем 21, 
необходимо вывести удвоенную разницу между этим числом и 21. При выполнении задания следует использовать тернарный оператор.

* Написать программу, вычисляющую выражение из первого задания, а переменные для неё инициализировать в другом файле

* Описать трёхмерный целочисленный массив, размером 3х3х3, указатель на значения внутри массива и при помощи операции 
разыменования вывести на экран значение центральной ячейки получившегося куба [1][1][1]
*/
extern int aa;
extern int bb;
extern int cc;
extern int dd;
extern float rr;

int main(){
    
    // ЗАДАНИЕ НОМЕР ОДИН
    int a = 5;
    int b = 3;
    int c = 7;
    int d = 2;
    float r;
    
    r = a * (b + (static_cast<float>(c) / d));
    std::cout << r << std::endl; 
    
    //ЗАДАНИЕ НОМЕР ДВА
    int k = 22;
    int eq;

    eq = (k > 21) ? 2 * (k - 21) : (21 - k);
    std::cout << eq << std::endl; 

    //ЗАДАНИЕ НОМЕР ТРИ
    rr = aa * (bb + (static_cast<float>(cc) / dd));
    std::cout << rr << std::endl; 


    //ЗАДАНИЕ НОМЕР ЧЕТЫРЕ
    int *guess;
    int p = 0;
    int cube[3][3][3];
    for (int i = 0; i < 3; i++){
        for (int j = 0; j < 3; j++){
            for (int k = 0; k < 3; k++){
                cube[i][j][k] = p++;
            }
        }
    }
    
    //ВЫВОД ДЛЯ СЕБЯ. ВИЗУАЛЬНЕЙ ПРОСТО НАГЛЯДНЕЙ И ПРОЩЕ СООБРАЖАТЬ
    for (int i = 0; i < 3; i++){
        for (int j = 0; j < 3; j++){
            for (int k = 0; k < 3; k++){
                std::cout << cube[i][j][k]; 
                std::cout << "  " ; 
            }
            std::cout << " " << std::endl; 
        }
        std::cout << " " << std::endl; 
    }


    guess = &cube[1][1][1];

    std::cout << *guess << std::endl; 

    std::cout << "ДЕЙСТВИТЕЛЬНО ОНО! " << cube[1][1][1] << std::endl; 
    

    return 0;
}